## Terraform initialization block
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }
  required_version = ">= 0.14.9"
}

## Provider info/settings
provider "aws" {
  region     = var.aws_region
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
}
variable "aws_access_key" {
  description = "AWS Access Key"
  type        = string
}
variable "aws_secret_key" {
  description = "AWS Secret Key"
  type        = string
}

## Network setting/s
resource "aws_vpc" "tf_vpc" {
  cidr_block = "10.0.0.0/16"
}
resource "aws_internet_gateway" "tf_ig" {
  vpc_id = aws_vpc.tf_vpc.id
}
resource "aws_route" "tf_route" {
  route_table_id         = aws_vpc.tf_vpc.main_route_table_id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.tf_ig.id
}
resource "aws_subnet" "tf_subnet" {
  vpc_id                  = aws_vpc.tf_vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
}
resource "aws_security_group" "tf_sg_elb" {
  name        = "terraform_sg_elb"
  description = "Used in Load Balancer"
  vpc_id      = aws_vpc.tf_vpc.id

  # Ingress rule for HTTP from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound interent access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

## Security group for SSH and HTTP for isntance
resource "aws_security_group" "tf_sg_ec2" {
  name        = "terraform_sg_ec2"
  description = "Used in Instnace"
  vpc_id      = aws_vpc.tf_vpc.id

  # SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access from the VPC
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_elb" "tf_elb" {
  name            = "terraform-web-elb"
  subnets         = aws_subnet.tf_subnet.id
  security_groups = aws_security_group.tf_sg_elb.id
  instances       = aws_instance.tf_ec2.id

  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
}

## SSH Public key fro EC2 instances
variable "key_name" {
  description = "EC2 SSH Key"
  type        = string
}
variable "public_key_path" {
  description = "EC2 SSH key path"
  type        = string
}
resource "aws_key_pair" "tf_key" {
  key_name   = var.key_name
  public_key = file(var.public_key_path)
}

variable "aws_amis" {
  description = "AMI details per region"
  type        = map("string")
  default = {
    eu-west-1 = "ami-6756bc1e"
    us-east-1 = "ami-1d4e8766"
    us-west-1 = "ami-969aa8f6"
    us-west-2 = "ami-88039bf0"
  }
}
variable "aws_region" {
  description = "AWS region"
  type        = string
}
variable "aws_instance_type" {
  description = "AWS region"
  type        = string
}
variable "ssh_user" {
  description = "SSH user"
  type        = string
}
variable "aws_ssh_pri_key_file" {
  description = "SSH private key path"
  type        = string
}
variable "instance_count" {
  description = "Instance count"
  type        = string
}
resource "aws_instance" "tf_ec2" {
  count					 = var.instance_count
  instance_type          = var.aws_instance_type
  ami                    = lookup(var.aws_amis, var.aws_region)
  key_name               = aws_key_pair.auth.id
  vpc_security_group_ids = [aws_security_group.tf_sg_ec2.id]
  subnet_id              = aws_subnet.tf_subnet.id
  # File provisioner to copy Tomcat set up script on target system
  provisioner "file" {
    source      = "tomcat-setup-script.sh"
    destination = "/tmp/tomcat-setup-script.sh"
    connection {
      type        = "ssh"
      user        = var.ssh_user
      private_key = file(var.aws_ssh_pri_key_file)
      host        = self.public_ip
    }
  }
  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = var.ssh_user
      private_key = file(var.aws_ssh_pri_key_file)
      host        = self.public_ip
    }
    inline = [
      "chmod +x /tmp/tomcat-setup-script.sh",
      "/tmp/tomcat-setup-script.sh",
    ]
  }
}

## RDS setup
variable "identifier" {
  default     = "mydb-rds"
  description = "Identifier for your DB"
}
variable "storage" {
  default     = "10"
  description = "Storage size in GB"
}
variable "engine" {
  default     = "postgres"
  description = "Engine type, example values mysql, postgres"
}
variable "engine_version" {
  description = "Engine version"

  default = {
    mysql    = "5.7.21"
    postgres = "9.6.8"
  }
}
variable "instance_class" {
  default     = "db.t2.micro"
  description = "Instance class"
}
variable "db_name" {
  default     = "mydb"
  description = "db name"
}
variable "username" {
  default     = "myuser"
  description = "User name"
}
variable "password" {
  description = "password, provide through your ENV variables"
}
resource "aws_security_group" "tf_sg_db" {
  name        = "main_rds_sg"
  description = "Allow all inbound traffic for DB"
  vpc_id      = var.aws_vpc.tf_vpc.id

  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_db_instance" "app_db" {
  depends_on             = aws_security_group.tf_sg_db.id
  identifier             = var.identifier
  allocated_storage      = var.storage
  engine                 = var.engine
  engine_version         = lookup(var.engine_version, var.engine)
  instance_class         = var.instance_class
  name                   = var.db_name
  username               = var.username
  password               = var.password
  vpc_security_group_ids = [aws_security_group.tf_sg_db.id]
  db_subnet_group_name   = aws_db_subnet_group.tf_subnet_group.id
}

resource "aws_db_subnet_group" "default" {
  name        = "main_subnet_group"
  description = "Our main group of subnets"
  subnet_ids  = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
}

resource "aws_subnet" "subnet_1" {
  vpc_id            = var.aws_vpc.tf_vpc.id
  availability_zone = var.az_1
}

resource "aws_subnet" "subnet_2" {
  vpc_id            = var.aws_vpc.tf_vpc.id
  availability_zone = var.az_2
}
